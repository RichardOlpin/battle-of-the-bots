*** MANUAL TESTING GUIDE START ***

This guide will walk you through visually testing the complete AuraFlow backend API using Postman. This allows you to see the results of the AI services just like the Chrome Extension will.

Prerequisites:
- You have Postman installed on your computer.
- You have a .env file in the project directory with your Google API credentials.

Testing Steps:

Step 1: Start the Server
  Open your project in a terminal and run the command:
    npm start
  
  You should see a message confirming the server is running, likely on port 3000. Keep this terminal open.

Step 2: Import the Postman Collection
  Open the Postman application.
  Find the "Import" button.
  Select the file named "AuraFlow_API_Interactive_Test.postman_collection.json" from your project folder.
  You should now see a new collection called "AuraFlow API Interactive Test" on the left side of Postman.

Step 3: Log In to Google (Manual Browser Step)
  This step connects the server to your Google account.
  
  In your normal web browser (like Chrome or Firefox), type this URL into the address bar and press Enter:
    http://localhost:3000/api/auth/google
  
  Follow the on-screen instructions to log into your Google account and grant the requested permissions.
  This will establish an active session on your local server.

Step 4: Visually Test the Scheduling AI
  Now, go back to Postman.
  In the collection, click on the request named "AI - Suggest a Focus Session".
  On the right side of the screen, click the blue "Send" button.
  
  Expected Result:
    In the bottom panel, you will see a JSON response from your server.
    To know if it's working, you should see a response body containing a suggested "startTime" and "endTime".
    This visually confirms your scheduling algorithm is working correctly through a live API call.

Step 5: Visually Test the Ritual AI
  In Postman, click on the request named "AI - Generate a Ritual" and click "Send".
  
  Expected Result:
    You should see a JSON response that describes a focus ritual, with properties like "name", "workDuration", and "breakDuration".
    This confirms your ritual generation logic is working correctly.

By following these steps, you have visually and interactively confirmed that your entire backend system is fully functional.

*** MANUAL TESTING GUIDE END ***
